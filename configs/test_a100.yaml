seed_everything: 42

# ---------------------------- TRAINER -------------------------------------------
trainer:
  default_root_dir: ${oc.env:AMLT_OUTPUT_DIR,/mnt/climate_pretraining/outputs/vit}

  precision: bf16

  gpus: null
  num_nodes: 1
  accelerator: gpu
  strategy: deepspeed_stage_1

  min_epochs: 1
  max_epochs: 50
  enable_progress_bar: true

  sync_batchnorm: True
  enable_checkpointing: True
  resume_from_checkpoint: null

  limit_val_batches: 0
  num_sanity_val_steps: 0

  # debugging
  fast_dev_run: false

  logger:
    class_path: pytorch_lightning.loggers.tensorboard.TensorBoardLogger
    init_args:
      save_dir: ${trainer.default_root_dir}/logs
      name: null
      version: null
      log_graph: False
      default_hp_metric: True
      prefix: ""

  callbacks:
    - class_path: pytorch_lightning.callbacks.LearningRateMonitor
      init_args:
        logging_interval: "step"

    - class_path: pytorch_lightning.callbacks.ModelCheckpoint
      init_args:
        dirpath: "${trainer.default_root_dir}/checkpoints"
        # monitor: "val/w_rmse" # name of the logged metric which determines when model is improving
        # mode: "min" # "max" means higher metric value is better, can be also "min"
        # save_top_k: 1 # save k best models (determined by above metric)
        save_last: True # additionaly always save model from last epoch
        verbose: False
        filename: "epoch_{epoch:03d}"
        auto_insert_metric_name: False

    # - class_path: pytorch_lightning.callbacks.EarlyStopping
    #   init_args:
    #     monitor: "val/w_mse" # name of the logged metric which determines when model is improving
    #     mode: "min" # "max" means higher metric value is better, can be also "min"
    #     patience: 3 # how many validation epochs of not improving until training stops
    #     min_delta: 0 # minimum change in the monitored metric needed to qualify as an improvement

    - class_path: pytorch_lightning.callbacks.RichModelSummary
      init_args:
        max_depth: -1

    - class_path: pytorch_lightning.callbacks.RichProgressBar

# ---------------------------- MODEL -------------------------------------------
model:
  lr: 0.0005
  beta_1: 0.9
  beta_2: 0.95
  weight_decay: 1e-5
  warmup_epochs: 10000
  max_epochs: 100000
  warmup_start_lr: 1e-8
  eta_min: 1e-8

  net:
    class_path: src.models.components.tokenized_vit_continuous.TokenizedViTContinuous
    init_args:
      img_size: [128, 256]
      patch_size: 16
      drop_path: 0.0
      learn_pos_emb: False
      default_vars: [
          "land_sea_mask",
          "orography",
          "lattitude",
          "2m_temperature",
          "10m_u_component_of_wind",
          "10m_v_component_of_wind",
          # "toa_incident_solar_radiation",
          # 'total_precipitation',
          "geopotential_50",
          "geopotential_250",
          "geopotential_500",
          "geopotential_600",
          "geopotential_700",
          "geopotential_850",
          "geopotential_925",
          "u_component_of_wind_50",
          "u_component_of_wind_250",
          "u_component_of_wind_500",
          "u_component_of_wind_600",
          "u_component_of_wind_700",
          "u_component_of_wind_850",
          "u_component_of_wind_925",
          "v_component_of_wind_50",
          "v_component_of_wind_250",
          "v_component_of_wind_500",
          "v_component_of_wind_600",
          "v_component_of_wind_700",
          "v_component_of_wind_850",
          "v_component_of_wind_925",
          "temperature_50",
          "temperature_250",
          "temperature_500",
          "temperature_600",
          "temperature_700",
          "temperature_850",
          "temperature_925",
          "relative_humidity_50",
          "relative_humidity_250",
          "relative_humidity_500",
          "relative_humidity_600",
          "relative_humidity_700",
          "relative_humidity_850",
          "relative_humidity_925",
          "specific_humidity_50",
          "specific_humidity_250",
          "specific_humidity_500",
          "specific_humidity_600",
          "specific_humidity_700",
          "specific_humidity_850",
          "specific_humidity_925",
        ]
      channel_agg: "mean"
      embed_dim: 1024
      depth: 8
      decoder_depth: 2
      num_heads: 16
      mlp_ratio: 4
      out_vars: null
      freeze_encoder: False
  pretrained_path: ""

# ---------------------------- DATA -------------------------------------------
data:
  dict_root_dirs: {
      'mpi-esm': '/datadrive/datasets/CMIP6/MPI-ESM/5.625deg_equally_np_all_levels',
  }
  dict_start_idx: {
      'mpi-esm': 0,
  }
  dict_end_idx: {
      'mpi-esm': 1,
  }
  dict_in_variables: {
    'mpi-esm': [
      "t2m",
      "u10",
      "v10",
      "z_50", "z_250", "z_500", "z_600", "z_700", "z_850", "z_925",
      "u_50", "u_250", "u_500", "u_600", "u_700", "u_850", "u_925",
      "v_50", "v_250", "v_500", "v_600", "v_700", "v_850", "v_925",
      "t_50", "t_250", "t_500", "t_600", "t_700", "t_850", "t_925",
      "q_50", "q_250", "q_500", "q_600", "q_700", "q_850", "q_925",
    ],
  }
  dict_out_variables: {
    'mpi-esm': null,
  }
  dict_max_predict_ranges: {
    'mpi-esm': 28,
  }
  dict_random_lead_time: {
    'mpi-esm': True,
  }
  dict_hrs_each_step: {
    'mpi-esm': 6,
  }
  dict_histories: {
    'mpi-esm': 1,
  }
  dict_intervals: {
    'mpi-esm': 0,
  }
  dict_subsamples: {
    'mpi-esm': 1,
  }
  dict_buffer_sizes: {
    'mpi-esm': 10000,
  }
  batch_size: 128
  num_workers: 1
  pin_memory: False
